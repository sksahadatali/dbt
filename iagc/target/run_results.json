{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.6", "generated_at": "2024-09-12T10:42:42.296686Z", "invocation_id": "3c734b7d-15c8-49f0-aeb8-4e83a9dca012", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.328631Z", "completed_at": "2024-09-12T10:42:19.348638Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.349632Z", "completed_at": "2024-09-12T10:42:19.349632Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023001670837402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.base_exposure_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.342634Z", "completed_at": "2024-09-12T10:42:19.348638Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.350633Z", "completed_at": "2024-09-12T10:42:19.350633Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023003339767456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.base_metric_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.356631Z", "completed_at": "2024-09-12T10:42:19.371631Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.372631Z", "completed_at": "2024-09-12T10:42:19.373630Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01999640464782715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.base_node_columns"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.364632Z", "completed_at": "2024-09-12T10:42:19.372631Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.373630Z", "completed_at": "2024-09-12T10:42:19.373630Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01896381378173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.base_node_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.377631Z", "completed_at": "2024-09-12T10:42:19.391632Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.392633Z", "completed_at": "2024-09-12T10:42:19.392633Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017002582550048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_source_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.base_source_columns"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.384632Z", "completed_at": "2024-09-12T10:42:19.392633Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.393632Z", "completed_at": "2024-09-12T10:42:19.393632Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01700115203857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposures", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.stg_exposures"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.398631Z", "completed_at": "2024-09-12T10:42:19.419634Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.420632Z", "completed_at": "2024-09-12T10:42:19.420632Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02500128746032715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metrics", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.stg_metrics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.406631Z", "completed_at": "2024-09-12T10:42:19.419634Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.420632Z", "completed_at": "2024-09-12T10:42:19.420632Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024001359939575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "relation_name": "GDP_SANDBOX.STAGING.stg_naming_convention_folders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.424632Z", "completed_at": "2024-09-12T10:42:19.447633Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.448633Z", "completed_at": "2024-09-12T10:42:19.448633Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026001930236816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "relation_name": "GDP_SANDBOX.STAGING.stg_naming_convention_prefixes"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.434630Z", "completed_at": "2024-09-12T10:42:19.447633Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.449630Z", "completed_at": "2024-09-12T10:42:19.449630Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026999235153198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_nodes", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.stg_nodes"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.453631Z", "completed_at": "2024-09-12T10:42:19.463706Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.464708Z", "completed_at": "2024-09-12T10:42:19.464708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014076471328735352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_sources", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "GDP_SANDBOX.STAGING.stg_sources"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.461196Z", "completed_at": "2024-09-12T10:42:19.464708Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.465708Z", "completed_at": "2024-09-12T10:42:19.465708Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014076471328735352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iagc.alrt_stat_cargo", "compiled": true, "compiled_code": "WITH ALRT_STAT_CARGO\r\nAS\r\n(SELECT * FROM GDP_SANDBOX.STAGING.API_EXTERNALSERVICEENTRY_SUBMITBOOKING_SAMPLE)\r\nSELECT LINK,ID FROM ALRT_STAT_CARGO", "relation_name": "GDP_SANDBOX.STAGING.alrt_stat_cargo"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.469708Z", "completed_at": "2024-09-12T10:42:19.470723Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.475707Z", "completed_at": "2024-09-12T10:42:19.475707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008000612258911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.471705Z", "completed_at": "2024-09-12T10:42:19.477707Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.478707Z", "completed_at": "2024-09-12T10:42:19.478707Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011000394821166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from GDP_SANDBOX.STAGING.base_exposure_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "relation_name": "GDP_SANDBOX.STAGING.stg_exposure_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.478707Z", "completed_at": "2024-09-12T10:42:19.484709Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.488729Z", "completed_at": "2024-09-12T10:42:19.488729Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011021852493286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from GDP_SANDBOX.STAGING.base_metric_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "relation_name": "GDP_SANDBOX.STAGING.stg_metric_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.484709Z", "completed_at": "2024-09-12T10:42:19.490707Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:19.491706Z", "completed_at": "2024-09-12T10:42:19.491706Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008000612258911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from GDP_SANDBOX.STAGING.base_node_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "relation_name": "GDP_SANDBOX.STAGING.stg_node_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.491706Z", "completed_at": "2024-09-12T10:42:20.386877Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:20.387877Z", "completed_at": "2024-09-12T10:42:20.387877Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9780693054199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_columns", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('GDP_SANDBOX.STAGING.base_node_columns' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"NODE_UNIQUE_ID\" as character varying(16777216)) as \"NODE_UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"DESCRIPTION\" as character varying(16777216)) as \"DESCRIPTION\" ,\n                    cast(\"DATA_TYPE\" as character varying(16777216)) as \"DATA_TYPE\" ,\n                    cast(\"CONSTRAINTS\" as character varying(16777216)) as \"CONSTRAINTS\" ,\n                    cast(\"HAS_NOT_NULL_CONSTRAINT\" as BOOLEAN) as \"HAS_NOT_NULL_CONSTRAINT\" ,\n                    cast(\"CONSTRAINTS_COUNT\" as NUMBER(38,0)) as \"CONSTRAINTS_COUNT\" ,\n                    cast(\"QUOTE\" as character varying(16777216)) as \"QUOTE\" \n\n            from GDP_SANDBOX.STAGING.base_node_columns\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('GDP_SANDBOX.STAGING.base_source_columns' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"NODE_UNIQUE_ID\" as character varying(16777216)) as \"NODE_UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"DESCRIPTION\" as character varying(16777216)) as \"DESCRIPTION\" ,\n                    cast(\"DATA_TYPE\" as character varying(16777216)) as \"DATA_TYPE\" ,\n                    cast(\"CONSTRAINTS\" as character varying(16777216)) as \"CONSTRAINTS\" ,\n                    cast(\"HAS_NOT_NULL_CONSTRAINT\" as BOOLEAN) as \"HAS_NOT_NULL_CONSTRAINT\" ,\n                    cast(\"CONSTRAINTS_COUNT\" as NUMBER(38,0)) as \"CONSTRAINTS_COUNT\" ,\n                    cast(\"QUOTE\" as character varying(16777216)) as \"QUOTE\" \n\n            from GDP_SANDBOX.STAGING.base_source_columns\n\n            \n        )\n\n        \n)\n\nselect * from final", "relation_name": "GDP_SANDBOX.STAGING.stg_columns"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:19.519707Z", "completed_at": "2024-09-12T10:42:41.623197Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.623197Z", "completed_at": "2024-09-12T10:42:41.623197Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 22.208024263381958, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('GDP_SANDBOX.STAGING.stg_nodes' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(\"IS_ENABLED\" as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(\"MATERIALIZED\" as character varying(16777216)) as \"MATERIALIZED\" ,\n                    cast(\"ON_SCHEMA_CHANGE\" as character varying(16777216)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(\"MODEL_GROUP\" as character varying(16777216)) as \"MODEL_GROUP\" ,\n                    cast(\"ACCESS\" as character varying(16777216)) as \"ACCESS\" ,\n                    cast(\"LATEST_VERSION\" as character varying(16777216)) as \"LATEST_VERSION\" ,\n                    cast(\"VERSION\" as character varying(16777216)) as \"VERSION\" ,\n                    cast(\"DEPRECATION_DATE\" as character varying(16777216)) as \"DEPRECATION_DATE\" ,\n                    cast(\"IS_CONTRACT_ENFORCED\" as BOOLEAN) as \"IS_CONTRACT_ENFORCED\" ,\n                    cast(\"TOTAL_DEFINED_COLUMNS\" as NUMBER(38,0)) as \"TOTAL_DEFINED_COLUMNS\" ,\n                    cast(\"TOTAL_DESCRIBED_COLUMNS\" as NUMBER(38,0)) as \"TOTAL_DESCRIBED_COLUMNS\" ,\n                    cast(\"DATABASE\" as character varying(16777216)) as \"DATABASE\" ,\n                    cast(\"SCHEMA\" as character varying(16777216)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(\"ALIAS\" as character varying(16777216)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(\"COLUMN_NAME\" as character varying(16777216)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(\"HARD_CODED_REFERENCES\" as character varying(16777216)) as \"HARD_CODED_REFERENCES\" ,\n                    cast(\"NUMBER_LINES\" as NUMBER(38,0)) as \"NUMBER_LINES\" ,\n                    cast(\"SQL_COMPLEXITY\" as FLOAT) as \"SQL_COMPLEXITY\" ,\n                    cast(\"MACRO_DEPENDENCIES\" as character varying(16777216)) as \"MACRO_DEPENDENCIES\" ,\n                    cast(\"IS_GENERIC_TEST\" as BOOLEAN) as \"IS_GENERIC_TEST\" ,\n                    cast(\"IS_EXCLUDED\" as BOOLEAN) as \"IS_EXCLUDED\" ,\n                    cast(null as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MATURITY\" ,\n                    cast(null as character varying(16777216)) as \"URL\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"LABEL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_FILTER\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_MEASURE\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_MEASURE_ALIAS\" ,\n                    cast(null as character varying(16777216)) as \"NUMERATOR\" ,\n                    cast(null as character varying(16777216)) as \"DENOMINATOR\" ,\n                    cast(null as character varying(16777216)) as \"EXPR\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_WINDOW\" ,\n                    cast(null as character varying(16777216)) as \"GRAIN_TO_DATE\" ,\n                    cast(null as character varying(16777216)) as \"SOURCE_NAME\" ,\n                    cast(null as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(null as character varying(16777216)) as \"LOADED_AT_FIELD\" ,\n                    cast(null as BOOLEAN) as \"IS_FRESHNESS_ENABLED\" ,\n                    cast(null as character varying(16777216)) as \"LOADER\" ,\n                    cast(null as character varying(16777216)) as \"IDENTIFIER\" \n\n            from GDP_SANDBOX.STAGING.stg_nodes\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('GDP_SANDBOX.STAGING.stg_exposures' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(null as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(null as character varying(16777216)) as \"MATERIALIZED\" ,\n                    cast(null as character varying(16777216)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(null as character varying(16777216)) as \"MODEL_GROUP\" ,\n                    cast(null as character varying(16777216)) as \"ACCESS\" ,\n                    cast(null as character varying(16777216)) as \"LATEST_VERSION\" ,\n                    cast(null as character varying(16777216)) as \"VERSION\" ,\n                    cast(null as character varying(16777216)) as \"DEPRECATION_DATE\" ,\n                    cast(null as BOOLEAN) as \"IS_CONTRACT_ENFORCED\" ,\n                    cast(null as NUMBER(38,0)) as \"TOTAL_DEFINED_COLUMNS\" ,\n                    cast(null as NUMBER(38,0)) as \"TOTAL_DESCRIBED_COLUMNS\" ,\n                    cast(null as character varying(16777216)) as \"DATABASE\" ,\n                    cast(null as character varying(16777216)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(null as character varying(16777216)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(null as character varying(16777216)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(null as character varying(16777216)) as \"HARD_CODED_REFERENCES\" ,\n                    cast(null as NUMBER(38,0)) as \"NUMBER_LINES\" ,\n                    cast(null as FLOAT) as \"SQL_COMPLEXITY\" ,\n                    cast(null as character varying(16777216)) as \"MACRO_DEPENDENCIES\" ,\n                    cast(null as BOOLEAN) as \"IS_GENERIC_TEST\" ,\n                    cast(null as BOOLEAN) as \"IS_EXCLUDED\" ,\n                    cast(\"EXPOSURE_TYPE\" as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(\"MATURITY\" as character varying(16777216)) as \"MATURITY\" ,\n                    cast(\"URL\" as character varying(16777216)) as \"URL\" ,\n                    cast(\"OWNER_NAME\" as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(\"OWNER_EMAIL\" as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"LABEL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_FILTER\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_MEASURE\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_MEASURE_ALIAS\" ,\n                    cast(null as character varying(16777216)) as \"NUMERATOR\" ,\n                    cast(null as character varying(16777216)) as \"DENOMINATOR\" ,\n                    cast(null as character varying(16777216)) as \"EXPR\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_WINDOW\" ,\n                    cast(null as character varying(16777216)) as \"GRAIN_TO_DATE\" ,\n                    cast(null as character varying(16777216)) as \"SOURCE_NAME\" ,\n                    cast(null as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(null as character varying(16777216)) as \"LOADED_AT_FIELD\" ,\n                    cast(null as BOOLEAN) as \"IS_FRESHNESS_ENABLED\" ,\n                    cast(null as character varying(16777216)) as \"LOADER\" ,\n                    cast(null as character varying(16777216)) as \"IDENTIFIER\" \n\n            from GDP_SANDBOX.STAGING.stg_exposures\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('GDP_SANDBOX.STAGING.stg_metrics' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(null as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(null as character varying(16777216)) as \"MATERIALIZED\" ,\n                    cast(null as character varying(16777216)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(null as character varying(16777216)) as \"MODEL_GROUP\" ,\n                    cast(null as character varying(16777216)) as \"ACCESS\" ,\n                    cast(null as character varying(16777216)) as \"LATEST_VERSION\" ,\n                    cast(null as character varying(16777216)) as \"VERSION\" ,\n                    cast(null as character varying(16777216)) as \"DEPRECATION_DATE\" ,\n                    cast(null as BOOLEAN) as \"IS_CONTRACT_ENFORCED\" ,\n                    cast(null as NUMBER(38,0)) as \"TOTAL_DEFINED_COLUMNS\" ,\n                    cast(null as NUMBER(38,0)) as \"TOTAL_DESCRIBED_COLUMNS\" ,\n                    cast(null as character varying(16777216)) as \"DATABASE\" ,\n                    cast(null as character varying(16777216)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(null as character varying(16777216)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(null as character varying(16777216)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(null as character varying(16777216)) as \"HARD_CODED_REFERENCES\" ,\n                    cast(null as NUMBER(38,0)) as \"NUMBER_LINES\" ,\n                    cast(null as FLOAT) as \"SQL_COMPLEXITY\" ,\n                    cast(null as character varying(16777216)) as \"MACRO_DEPENDENCIES\" ,\n                    cast(null as BOOLEAN) as \"IS_GENERIC_TEST\" ,\n                    cast(null as BOOLEAN) as \"IS_EXCLUDED\" ,\n                    cast(null as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MATURITY\" ,\n                    cast(null as character varying(16777216)) as \"URL\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(\"METRIC_TYPE\" as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(\"LABEL\" as character varying(16777216)) as \"LABEL\" ,\n                    cast(\"METRIC_FILTER\" as character varying(16777216)) as \"METRIC_FILTER\" ,\n                    cast(\"METRIC_MEASURE\" as character varying(16777216)) as \"METRIC_MEASURE\" ,\n                    cast(\"METRIC_MEASURE_ALIAS\" as character varying(16777216)) as \"METRIC_MEASURE_ALIAS\" ,\n                    cast(\"NUMERATOR\" as character varying(16777216)) as \"NUMERATOR\" ,\n                    cast(\"DENOMINATOR\" as character varying(16777216)) as \"DENOMINATOR\" ,\n                    cast(\"EXPR\" as character varying(16777216)) as \"EXPR\" ,\n                    cast(\"METRIC_WINDOW\" as character varying(16777216)) as \"METRIC_WINDOW\" ,\n                    cast(\"GRAIN_TO_DATE\" as character varying(16777216)) as \"GRAIN_TO_DATE\" ,\n                    cast(null as character varying(16777216)) as \"SOURCE_NAME\" ,\n                    cast(null as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(null as character varying(16777216)) as \"LOADED_AT_FIELD\" ,\n                    cast(null as BOOLEAN) as \"IS_FRESHNESS_ENABLED\" ,\n                    cast(null as character varying(16777216)) as \"LOADER\" ,\n                    cast(null as character varying(16777216)) as \"IDENTIFIER\" \n\n            from GDP_SANDBOX.STAGING.stg_metrics\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('GDP_SANDBOX.STAGING.stg_sources' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(\"IS_ENABLED\" as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(null as character varying(16777216)) as \"MATERIALIZED\" ,\n                    cast(null as character varying(16777216)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(null as character varying(16777216)) as \"MODEL_GROUP\" ,\n                    cast(null as character varying(16777216)) as \"ACCESS\" ,\n                    cast(null as character varying(16777216)) as \"LATEST_VERSION\" ,\n                    cast(null as character varying(16777216)) as \"VERSION\" ,\n                    cast(null as character varying(16777216)) as \"DEPRECATION_DATE\" ,\n                    cast(null as BOOLEAN) as \"IS_CONTRACT_ENFORCED\" ,\n                    cast(null as NUMBER(38,0)) as \"TOTAL_DEFINED_COLUMNS\" ,\n                    cast(null as NUMBER(38,0)) as \"TOTAL_DESCRIBED_COLUMNS\" ,\n                    cast(\"DATABASE\" as character varying(16777216)) as \"DATABASE\" ,\n                    cast(\"SCHEMA\" as character varying(16777216)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(\"ALIAS\" as character varying(16777216)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(null as character varying(16777216)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(null as character varying(16777216)) as \"HARD_CODED_REFERENCES\" ,\n                    cast(null as NUMBER(38,0)) as \"NUMBER_LINES\" ,\n                    cast(null as FLOAT) as \"SQL_COMPLEXITY\" ,\n                    cast(null as character varying(16777216)) as \"MACRO_DEPENDENCIES\" ,\n                    cast(null as BOOLEAN) as \"IS_GENERIC_TEST\" ,\n                    cast(\"IS_EXCLUDED\" as BOOLEAN) as \"IS_EXCLUDED\" ,\n                    cast(null as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MATURITY\" ,\n                    cast(null as character varying(16777216)) as \"URL\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"LABEL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_FILTER\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_MEASURE\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_MEASURE_ALIAS\" ,\n                    cast(null as character varying(16777216)) as \"NUMERATOR\" ,\n                    cast(null as character varying(16777216)) as \"DENOMINATOR\" ,\n                    cast(null as character varying(16777216)) as \"EXPR\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_WINDOW\" ,\n                    cast(null as character varying(16777216)) as \"GRAIN_TO_DATE\" ,\n                    cast(\"SOURCE_NAME\" as character varying(16777216)) as \"SOURCE_NAME\" ,\n                    cast(\"IS_SOURCE_DESCRIBED\" as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(\"LOADED_AT_FIELD\" as character varying(16777216)) as \"LOADED_AT_FIELD\" ,\n                    cast(\"IS_FRESHNESS_ENABLED\" as BOOLEAN) as \"IS_FRESHNESS_ENABLED\" ,\n                    cast(\"LOADER\" as character varying(16777216)) as \"LOADER\" ,\n                    cast(\"IDENTIFIER\" as character varying(16777216)) as \"IDENTIFIER\" \n\n            from GDP_SANDBOX.STAGING.stg_sources\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from GDP_SANDBOX.STAGING.stg_naming_convention_prefixes\n), \n\nnaming_convention_folders as (\n    select * from GDP_SANDBOX.STAGING.stg_naming_convention_folders\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n||'_' \n        end as prefix,\n        \n  \n      \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*\\\\\\\\',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*\\\\\\\\','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '\\\\'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '\\\\'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '\\\\'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '\\\\'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "relation_name": "GDP_SANDBOX.STAGING.int_all_graph_resources"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.747715Z", "completed_at": "2024-09-12T10:42:41.755620Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.756625Z", "completed_at": "2024-09-12T10:42:41.756625Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023945093154907227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n    listagg(\n        resource_name,\n        ', '\n        )\n        within group (order by resource_name) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates", "relation_name": "GDP_SANDBOX.STAGING.fct_duplicate_sources"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.734722Z", "completed_at": "2024-09-12T10:42:41.757634Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.758622Z", "completed_at": "2024-09-12T10:42:41.758622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027887821197509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "relation_name": "GDP_SANDBOX.STAGING.fct_documentation_coverage"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.761620Z", "completed_at": "2024-09-12T10:42:41.775622Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.775622Z", "completed_at": "2024-09-12T10:42:41.775622Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01600027084350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_hard_coded_references"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.769621Z", "completed_at": "2024-09-12T10:42:41.776621Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.777620Z", "completed_at": "2024-09-12T10:42:41.777620Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016000032424926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from GDP_SANDBOX.STAGING.stg_naming_convention_prefixes\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    listagg(\n        prefix_value,\n        ', '\n        )\n        within group (order by prefix_value) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_model_naming_conventions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.780620Z", "completed_at": "2024-09-12T10:42:41.789621Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.790621Z", "completed_at": "2024-09-12T10:42:41.790621Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012000083923339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_public_models_without_contract"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.784620Z", "completed_at": "2024-09-12T10:42:41.790621Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.791623Z", "completed_at": "2024-09-12T10:42:41.791623Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012003183364868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_directories", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models\\\\' || 'staging' || '\\\\' || source_name || '\\\\' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_source_directories"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.795621Z", "completed_at": "2024-09-12T10:42:41.861627Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.863621Z", "completed_at": "2024-09-12T10:42:41.863621Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07000184059143066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_sources_without_freshness"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.852621Z", "completed_at": "2024-09-12T10:42:41.862627Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.864622Z", "completed_at": "2024-09-12T10:42:41.864622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07000184059143066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_undocumented_models"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.872621Z", "completed_at": "2024-09-12T10:42:41.877624Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.878620Z", "completed_at": "2024-09-12T10:42:41.878620Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010999679565429688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_undocumented_source_tables"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.868620Z", "completed_at": "2024-09-12T10:42:41.878620Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.879620Z", "completed_at": "2024-09-12T10:42:41.879620Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012998819351196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_undocumented_public_models"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.883621Z", "completed_at": "2024-09-12T10:42:41.892624Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.893626Z", "completed_at": "2024-09-12T10:42:41.893626Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01200556755065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_undocumented_sources"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.886621Z", "completed_at": "2024-09-12T10:42:41.894623Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.895620Z", "completed_at": "2024-09-12T10:42:41.895620Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013999462127685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from GDP_SANDBOX.STAGING.int_all_graph_resources\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from GDP_SANDBOX.STAGING.stg_node_relationships\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from GDP_SANDBOX.STAGING.stg_exposure_relationships\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from GDP_SANDBOX.STAGING.stg_metric_relationships\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "relation_name": "GDP_SANDBOX.STAGING.int_direct_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.898622Z", "completed_at": "2024-09-12T10:42:41.917632Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.918621Z", "completed_at": "2024-09-12T10:42:41.918621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02300095558166504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_duplicate_sources\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.920621Z", "completed_at": "2024-09-12T10:42:41.927655Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.928655Z", "completed_at": "2024-09-12T10:42:41.928655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009032964706420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_hard_coded_references\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.908622Z", "completed_at": "2024-09-12T10:42:41.928655Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.930178Z", "completed_at": "2024-09-12T10:42:41.930178Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03255820274353027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from GDP_SANDBOX.STAGING.fct_documentation_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.933166Z", "completed_at": "2024-09-12T10:42:41.943167Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.944166Z", "completed_at": "2024-09-12T10:42:41.944166Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013000726699829102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_model_naming_conventions\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.937167Z", "completed_at": "2024-09-12T10:42:41.944166Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.946166Z", "completed_at": "2024-09-12T10:42:41.946166Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013998270034790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_public_models_without_contract\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.948177Z", "completed_at": "2024-09-12T10:42:41.958166Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.959167Z", "completed_at": "2024-09-12T10:42:41.959167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014000892639160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_source_directories\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.952167Z", "completed_at": "2024-09-12T10:42:41.960167Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.961166Z", "completed_at": "2024-09-12T10:42:41.961166Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012988805770874023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_sources_without_freshness\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.964166Z", "completed_at": "2024-09-12T10:42:41.972168Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.973167Z", "completed_at": "2024-09-12T10:42:41.973167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010999441146850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_undocumented_models\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.968166Z", "completed_at": "2024-09-12T10:42:41.974168Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.975167Z", "completed_at": "2024-09-12T10:42:41.975167Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011999845504760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_undocumented_source_tables\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.977167Z", "completed_at": "2024-09-12T10:42:41.986168Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.987168Z", "completed_at": "2024-09-12T10:42:41.987168Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012001276016235352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_undocumented_public_models\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.982167Z", "completed_at": "2024-09-12T10:42:41.988170Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:41.989167Z", "completed_at": "2024-09-12T10:42:41.989167Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009000301361083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_undocumented_sources\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.991167Z", "completed_at": "2024-09-12T10:42:42.008167Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.009166Z", "completed_at": "2024-09-12T10:42:42.009166Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01999950408935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_directories", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from GDP_SANDBOX.STAGING.int_direct_relationships\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_test_directories"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:41.996168Z", "completed_at": "2024-09-12T10:42:42.010167Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.011167Z", "completed_at": "2024-09-12T10:42:42.011167Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016986608505249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from GDP_SANDBOX.STAGING.int_direct_relationships\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        array_construct( resource_name ) as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "relation_name": "GDP_SANDBOX.STAGING.int_all_dag_relationships"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.013167Z", "completed_at": "2024-09-12T10:42:42.024686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.025686Z", "completed_at": "2024-09-12T10:42:42.025686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014518976211547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n),\n\nrelationships as (\n    select * from GDP_SANDBOX.STAGING.int_direct_relationships\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from GDP_SANDBOX.STAGING.base_node_columns\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "relation_name": "GDP_SANDBOX.STAGING.int_model_test_summary"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.020167Z", "completed_at": "2024-09-12T10:42:42.026685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.027685Z", "completed_at": "2024-09-12T10:42:42.027685Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008497953414916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_test_directories\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.028686Z", "completed_at": "2024-09-12T10:42:42.036686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.038686Z", "completed_at": "2024-09-12T10:42:42.038686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01200103759765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "relation_name": "GDP_SANDBOX.STAGING.fct_chained_views_dependencies"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.034686Z", "completed_at": "2024-09-12T10:42:42.040686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.044685Z", "completed_at": "2024-09-12T10:42:42.044685Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010999917984008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_direct_join_to_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.041686Z", "completed_at": "2024-09-12T10:42:42.046687Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.052685Z", "completed_at": "2024-09-12T10:42:42.052685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012998819351196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_exposure_parents_materializations"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.047684Z", "completed_at": "2024-09-12T10:42:42.056686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.059697Z", "completed_at": "2024-09-12T10:42:42.059697Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014011144638061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_exposures_dependent_on_private_models"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.056686Z", "completed_at": "2024-09-12T10:42:42.062685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.063685Z", "completed_at": "2024-09-12T10:42:42.063685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008998632431030273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_marts_or_intermediate_dependent_on_source"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.063685Z", "completed_at": "2024-09-12T10:42:42.071686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.076684Z", "completed_at": "2024-09-12T10:42:42.076684Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014998674392700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_directories", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from GDP_SANDBOX.STAGING.int_all_graph_resources\n    where not is_excluded\n),\n\nfolders as (\n    select * from GDP_SANDBOX.STAGING.stg_naming_convention_folders\n), \n\nall_dag_relationships as (\n    select * from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models\\\\' || 'staging' || '\\\\' || parent_source_name || '\\\\' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '\\\\...\\\\' || folders.folder_name_value || '\\\\...\\\\' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_model_directories"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.071686Z", "completed_at": "2024-09-12T10:42:42.082686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.083687Z", "completed_at": "2024-09-12T10:42:42.083687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014001846313476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_model_fanout"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.078686Z", "completed_at": "2024-09-12T10:42:42.085686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.089687Z", "completed_at": "2024-09-12T10:42:42.089687Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012002229690551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    listagg(\n        parent,\n        ', '\n        )\n        within group (order by parent) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_multiple_sources_joined"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.085686Z", "completed_at": "2024-09-12T10:42:42.092685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.096685Z", "completed_at": "2024-09-12T10:42:42.096685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011999130249023438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_rejoining_of_upstream_concepts"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.092685Z", "completed_at": "2024-09-12T10:42:42.103686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.104687Z", "completed_at": "2024-09-12T10:42:42.105686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01399993896484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_root_models", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_root_models"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.098686Z", "completed_at": "2024-09-12T10:42:42.107686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.107686Z", "completed_at": "2024-09-12T10:42:42.107686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010000228881835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_source_fanout"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.108686Z", "completed_at": "2024-09-12T10:42:42.114685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.118685Z", "completed_at": "2024-09-12T10:42:42.118685Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011998414993286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_staging_dependent_on_marts_or_intermediate"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.115686Z", "completed_at": "2024-09-12T10:42:42.120686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.121687Z", "completed_at": "2024-09-12T10:42:42.121687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009001970291137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_staging_dependent_on_staging"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.122687Z", "completed_at": "2024-09-12T10:42:42.128686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.131686Z", "completed_at": "2024-09-12T10:42:42.131686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012001752853393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_too_many_joins"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.128686Z", "completed_at": "2024-09-12T10:42:42.134685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.138687Z", "completed_at": "2024-09-12T10:42:42.138687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011002302169799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from GDP_SANDBOX.STAGING.int_all_dag_relationships\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_unused_sources"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.134685Z", "completed_at": "2024-09-12T10:42:42.141685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.149697Z", "completed_at": "2024-09-12T10:42:42.149697Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016011476516723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "compiled": true, "compiled_code": "with \n\ntests as (\n    select * from GDP_SANDBOX.STAGING.int_model_test_summary \n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select \n        resource_name, is_primary_key_tested, number_of_tests_on_model, number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "GDP_SANDBOX.STAGING.fct_missing_primary_key_tests"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.142687Z", "completed_at": "2024-09-12T10:42:42.151686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.152685Z", "completed_at": "2024-09-12T10:42:42.152685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012000322341918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from GDP_SANDBOX.STAGING.int_model_test_summary\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "relation_name": "GDP_SANDBOX.STAGING.fct_test_coverage"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.153686Z", "completed_at": "2024-09-12T10:42:42.164686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.165686Z", "completed_at": "2024-09-12T10:42:42.165686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014000177383422852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_chained_views_dependencies\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.159685Z", "completed_at": "2024-09-12T10:42:42.166686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.168686Z", "completed_at": "2024-09-12T10:42:42.168686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009000778198242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_direct_join_to_source\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.170687Z", "completed_at": "2024-09-12T10:42:42.181686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.182686Z", "completed_at": "2024-09-12T10:42:42.182686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01600027084350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_exposure_parents_materializations\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.177687Z", "completed_at": "2024-09-12T10:42:42.183686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.184687Z", "completed_at": "2024-09-12T10:42:42.184687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008002042770385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_exposures_dependent_on_private_models\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.187689Z", "completed_at": "2024-09-12T10:42:42.199685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.200687Z", "completed_at": "2024-09-12T10:42:42.200687Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015999317169189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_marts_or_intermediate_dependent_on_source\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.195687Z", "completed_at": "2024-09-12T10:42:42.201687Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.202686Z", "completed_at": "2024-09-12T10:42:42.202686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010001182556152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_model_directories\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.207686Z", "completed_at": "2024-09-12T10:42:42.217687Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.218686Z", "completed_at": "2024-09-12T10:42:42.218686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013999462127685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_model_fanout\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.213686Z", "completed_at": "2024-09-12T10:42:42.219686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.220686Z", "completed_at": "2024-09-12T10:42:42.220686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014000892639160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_multiple_sources_joined\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.225686Z", "completed_at": "2024-09-12T10:42:42.234686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.235685Z", "completed_at": "2024-09-12T10:42:42.235685Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012996912002563477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_rejoining_of_upstream_concepts\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.230686Z", "completed_at": "2024-09-12T10:42:42.236685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.238690Z", "completed_at": "2024-09-12T10:42:42.238690Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01400446891784668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_root_models\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.240686Z", "completed_at": "2024-09-12T10:42:42.249686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.250685Z", "completed_at": "2024-09-12T10:42:42.250685Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012998104095458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_source_fanout\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.245686Z", "completed_at": "2024-09-12T10:42:42.250685Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.251686Z", "completed_at": "2024-09-12T10:42:42.251686Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007001161575317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_staging_dependent_on_marts_or_intermediate\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.255687Z", "completed_at": "2024-09-12T10:42:42.266686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.266686Z", "completed_at": "2024-09-12T10:42:42.266686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014000177383422852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_staging_dependent_on_staging\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.261686Z", "completed_at": "2024-09-12T10:42:42.267687Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.268685Z", "completed_at": "2024-09-12T10:42:42.268685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013998746871948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_too_many_joins\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.271689Z", "completed_at": "2024-09-12T10:42:42.281686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.281686Z", "completed_at": "2024-09-12T10:42:42.282686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014000415802001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_unused_sources\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.277686Z", "completed_at": "2024-09-12T10:42:42.282686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.283685Z", "completed_at": "2024-09-12T10:42:42.283685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007998943328857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from GDP_SANDBOX.STAGING.fct_missing_primary_key_tests\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-12T10:42:42.285689Z", "completed_at": "2024-09-12T10:42:42.292686Z"}, {"name": "execute", "started_at": "2024-09-12T10:42:42.293686Z", "completed_at": "2024-09-12T10:42:42.293686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00899958610534668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from GDP_SANDBOX.STAGING.fct_test_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}], "elapsed_time": 24.985519647598267, "args": {"exclude": [], "static_parser": true, "print": true, "source_freshness_run_project_hooks": false, "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_path": "C:\\Users\\n541568\\dbt\\iagc\\logs", "introspect": true, "enable_legacy_logger": false, "write_json": true, "log_file_max_bytes": 10485760, "favor_state": false, "partial_parse": true, "require_resource_names_without_spaces": false, "profiles_dir": "C:\\Users\\n541568\\.dbt", "cache_selected_only": false, "use_colors_file": true, "warn_error_options": {"include": [], "exclude": []}, "populate_cache": true, "log_format_file": "debug", "log_level_file": "debug", "defer": false, "empty_catalog": false, "invocation_command": "dbt docs generate", "select": [], "quiet": false, "indirect_selection": "eager", "show_resource_report": false, "strict_mode": false, "printer_width": 80, "send_anonymous_usage_stats": true, "project_dir": "C:\\Users\\n541568\\dbt\\iagc", "which": "generate", "static": false, "vars": {}, "version_check": true, "compile": true, "log_level": "info", "use_colors": true, "log_format": "default", "partial_parse_file_diff": true}}